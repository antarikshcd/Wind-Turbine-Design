%% Initialization code
function varargout = WindTurbineDesign(varargin)
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @WindTurbineDesign_OpeningFcn, ...
                   'gui_OutputFcn',  @WindTurbineDesign_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end
if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end

%% Opening function
function WindTurbineDesign_OpeningFcn(hObject, eventdata, handles, varargin)

% Add subfunctions path
addpath('subfunctions')

% Empty turbine geometry
buttons = [...
    handles.SaveProject, ...
    handles.Landscape, ...
    handles.BladeStyle, ...
    handles.BladeColor, ...
    handles.TowerStyle, ...
    handles.TowerColor, ...
    handles.RotationSpeed_textbox, ...
    handles.Undock, ...
    handles.Animate, ...
    handles.BladeDesign, ...
    handles.TowerDesign, ...
    handles.NacelleDesign, ...
    handles.DrivetrainDesign, ...
    handles.GenerateSteadyOp, ...
    handles.BuildFAST];
set(buttons, 'Enable', 'off');

% Color scheme
handles.EdgeColor = 'none';
handles.White = [255, 255, 255]/255;
handles.Lightergrey = [200, 200, 200]/255;
handles.Lightgrey = [174, 174, 174]/255;
handles.Grey = [120, 120, 120]/255;
handles.Red = [189, 112, 82]/255;
handles.Brown = [146, 95, 54]/255;
handles.Green = [194, 184, 101]/255;
handles.Yellow = [249, 178, 51]/255;
handles.Blue = [0 165, 213]/255;
handles.Orange = [245, 162, 77]/255;
handles.Rock = 0.5*(handles.Grey + handles.Brown);
handles.Sand = [223, 208, 165]/255;
handles.Sea = [77, 142, 150]/255;
handles.ColorArray = [...
    handles.White; ...
    handles.Lightergrey; ...
    handles.Lightgrey; ...
    handles.Grey; ...
    handles.Red; ...
    handles.Green; ...
    handles.Yellow; ...
    handles.Blue; ...
    handles.Orange; ...
    handles.Brown; ...
    handles.Rock; ...
    handles.Sand; ...
    handles.Sea];

% Lighting properties (AmbientStrengh/DiffuseStrength/SpecularStrength)
handles.Steel = [0.8, 0.5, 0.9];
handles.Glassfiber = [0.7, 0.7, 0.2];
handles.Nature = [0.9, 0.2, 0.0];

% Turbine plot settings
handles.RotationSpeed = 10;
set(handles.RotationSpeed_textbox, 'String', num2str(handles.RotationSpeed));
axes(handles.TurbinePlot)
axis equal
axis off
rotate3d on
view(-45,180/pi*atan(sin(pi/4)))

% Random number seed
handles.seed = randi(1e6);

% Update handles structure
guidata(hObject, handles);
function WindTurbineDesign_CreateFcn(hObject, eventdata, handles)

%% Closing function
function WindTurbineDesign_CloseRequestFcn(hObject, eventdata, handles)
if ~get(handles.Animate,'Value')
	close all force
else
    set(handles.Animate, 'Value', 0);
    set(handles.Animate, 'String', 'Closing...')
end

%% Output function
function varargout = WindTurbineDesign_OutputFcn(hObject, eventdata, handles) 

%% Info button
function Info_Callback(hObject, eventdata, handles)
info = [...
    'Wind turbine design suite v0.3 (9 Feb 2016) \n', ...
    'For the course AE4W09\n', ...
    '\n', ...
    'Works on Windows with Matlab R2014b (v8.4) and above \n', ...
    'Designed for FAST v7.02', ...
    '\n', ...
    'Course instructor: Michiel Zaayer (M.B.Zaayer@tudelft.nl) \n', ...
    'GUI created by: René Bos (R.Bos-1@tudelft.nl) \n', ...
    'For additional questions: Sebastian Sanchez Perez Moreno (S.SanchezPerezMoreno@tudelft.nl)'];
helpdlg(sprintf(info), 'Info')

%% Open turbine
function OpenProject_Callback(hObject, eventdata, handles)

% Dialogue box
[FileName,PathName] = uigetfile('*.mat', 'Open turbine');
if FileName
    
    % Load project
    load([PathName,FileName]);

    % Stop animation
    animating = false;
    if get(handles.Animate, 'Value')
        set(handles.Animate, 'Value', 0);
        animating = true;
    end

    % Clear current plot
    cla(handles.TurbinePlot)

    % Store turbine geometry in handles
    handles.Tower_Height = Tower_Height;
    handles.Tower_OuterDiameter = Tower_OuterDiameter;
    handles.Tower_Mass = Tower_Mass;
    handles.Tower_EI = Tower_EI;
    handles.Tower_BottomThickness = Tower_BottomThickness;
    handles.Tower_TopThickness = Tower_TopThickness;
    handles.Blade_Radius = Blade_Radius;
    handles.Blade_Mass = Blade_Mass;
    handles.Blade_EIflap = Blade_EIflap;
    handles.Blade_EIedge = Blade_EIedge;
    handles.Blade_Twist = Blade_Twist;
    handles.Blade_Chord = Blade_Chord;
    handles.Blade_PitchAxis = Blade_PitchAxis;
    handles.Blade_NFoil = Blade_NFoil;
    handles.Blade_Cone = Blade_Cone;
    handles.NBlades = NBlades;
    handles.Airfoils = Airfoils;
    handles.AoA = AoA;
    handles.CL = CL;
    handles.CD = CD;
    handles.Nacelle = Nacelle;
    handles.Nacelle_Length = Nacelle_Length;
    handles.Nacelle_Diameter = Nacelle_Diameter;
    handles.Nacelle_Mass = Nacelle_Mass;
    handles.Hub = Hub;
    handles.Hub_Height = Hub_Height;
    handles.Hub_Overhang = Hub_Overhang;
    handles.Hub_Mass = Hub_Mass;
    handles.Shaft_Tilt = Shaft_Tilt;
    handles.Nosecone_Length = Nosecone_Length;
    handles.WindSpeed_Cutin = WindSpeed_Cutin;
    handles.WindSpeed_Cutout = WindSpeed_Cutout;
    handles.Rated_Power = Rated_Power;
    handles.Rated_TipSpeedRatio = Rated_TipSpeedRatio;
    handles.Blade_PitchOffset = Blade_PitchOffset;
    handles.Generator_Efficiency = Generator_Efficiency;
    handles.HSS_Inertia = HSS_Inertia;
    handles.Gearbox_Efficiency = Gearbox_Efficiency;
    handles.Gearbox_Ratio = Gearbox_Ratio;

    % Set turbine appearance
    set(handles.Landscape, 'Value', Appearance(1));
    set(handles.BladeStyle, 'Value', Appearance(2));
    set(handles.BladeColor, 'Value', Appearance(3));
    set(handles.TowerStyle, 'Value', Appearance(4));
    set(handles.TowerColor, 'Value', Appearance(5));
    handles.BladePaint = handles.ColorArray(Appearance(3),:);
    handles.TowerPaint = handles.ColorArray(Appearance(5),:);
    
    % Enable buttons
    buttons = [...
        handles.SaveProject, ...
        handles.Landscape, ...
        handles.BladeStyle, ...
        handles.BladeColor, ...
        handles.TowerStyle, ...
        handles.TowerColor, ...
        handles.RotationSpeed_textbox, ...
        handles.Undock, ...
        handles.Animate, ...
        handles.BladeDesign, ...
        handles.TowerDesign, ...
        handles.NacelleDesign, ...
        handles.DrivetrainDesign, ...
        handles.GenerateSteadyOp, ...
        handles.BuildFAST];
    set(buttons, 'Enable', 'on');
    
    % Update handles structure
    guidata(hObject, handles);
    
    % Plot turbine
    PlotTurbine(handles,false)

    % Resume animation
    if animating
        set(handles.Animate, 'Value', 1)
    end
    
end

%% Save turbine
function SaveProject_Callback(hObject, eventdata, handles)

% Dialogue box
[FileName,PathName] = uiputfile('*.mat', 'Save turbine');
if FileName
    
    % Get turbine geometry from handles
    Tower_Height = handles.Tower_Height;
    Tower_OuterDiameter = handles.Tower_OuterDiameter;
    Tower_Mass = handles.Tower_Mass;
    Tower_EI = handles.Tower_EI;
    Tower_BottomThickness = handles.Tower_BottomThickness;
    Tower_TopThickness = handles.Tower_TopThickness;
    Blade_Radius = handles.Blade_Radius;
    Blade_Mass = handles.Blade_Mass;
    Blade_EIflap = handles.Blade_EIflap;
    Blade_EIedge = handles.Blade_EIedge;
    Blade_Twist = handles.Blade_Twist;
    Blade_Chord = handles.Blade_Chord;
    Blade_PitchAxis = handles.Blade_PitchAxis;
    Blade_NFoil = handles.Blade_NFoil;
    Blade_Cone = handles.Blade_Cone;
    NBlades = handles.NBlades;
    Airfoils = handles.Airfoils;
    AoA = handles.AoA;
    CL = handles.CL;
    CD = handles.CD;
    Nacelle = handles.Nacelle;
    Nacelle_Length = handles.Nacelle_Length;
    Nacelle_Diameter = handles.Nacelle_Diameter;
    Nacelle_Mass = handles.Nacelle_Mass;
    Hub = handles.Hub;
    Hub_Height = handles.Hub_Height;
    Hub_Overhang = handles.Hub_Overhang;
    Hub_Mass = handles.Hub_Mass;
    Shaft_Tilt = handles.Shaft_Tilt;
    Nosecone_Length = handles.Nosecone_Length;
    WindSpeed_Cutin = handles.WindSpeed_Cutin;
    WindSpeed_Cutout = handles.WindSpeed_Cutout;
    Rated_Power = handles.Rated_Power;
    Rated_TipSpeedRatio = handles.Rated_TipSpeedRatio;
    Blade_PitchOffset = handles.Blade_PitchOffset;
    Generator_Efficiency = handles.Generator_Efficiency;
    HSS_Inertia = handles.HSS_Inertia;
    Gearbox_Efficiency = handles.Gearbox_Efficiency;
    Gearbox_Ratio = handles.Gearbox_Ratio;

    % Get turbine appearance
    Appearance = [...
        get(handles.Landscape, 'Value');
        get(handles.BladeStyle, 'Value');
        get(handles.BladeColor, 'Value');
        get(handles.TowerStyle, 'Value');
        get(handles.TowerColor, 'Value')];
    
    % Save project
    save([PathName,FileName], ...
        'Tower_Height', ...
        'Tower_OuterDiameter', ...
        'Tower_Mass', ...
        'Tower_EI', ...
        'Tower_BottomThickness', ...
        'Tower_TopThickness', ...
        'Blade_Mass', ...
        'Blade_EIflap', ...
        'Blade_EIedge', ...
        'Blade_Radius', ...
        'Blade_Twist', ...
        'Blade_Chord', ...
        'Blade_PitchAxis', ...
        'Blade_NFoil', ...
        'Blade_Cone', ...
        'NBlades', ...
        'Airfoils', ...
        'AoA', ...
        'CL', ...
        'CD', ...
        'Nacelle', ...
        'Nacelle_Length', ...
        'Nacelle_Diameter', ...
        'Nacelle_Mass', ...
        'Hub', ...
        'Hub_Height', ...
        'Hub_Overhang', ...
        'Hub_Mass', ...
        'Shaft_Tilt', ...
        'Nosecone_Length', ...
        'WindSpeed_Cutin', ...
        'WindSpeed_Cutout', ...
        'Rated_Power', ...
        'Rated_TipSpeedRatio', ...
        'Blade_PitchOffset', ...
        'Generator_Efficiency', ...
        'HSS_Inertia', ...
        'Gearbox_Efficiency', ...
        'Gearbox_Ratio', ...
        'Appearance')

end

%% Turbine plot
function PlotTurbine(handles,undock)

% Get geometry from handles
Hub_Height = handles.Hub_Height;
Tower_OuterDiameter = handles.Tower_OuterDiameter;
Tower_Height = handles.Tower_Height;
Hub_Overhang = handles.Hub_Overhang;
Shaft_Tilt = handles.Shaft_Tilt;
Nacelle_Length = handles.Nacelle_Length;
Nacelle_Diameter = handles.Nacelle_Diameter;
Blade_Radius = handles.Blade_Radius;
Blade_Twist = handles.Blade_Twist;
Blade_Chord = handles.Blade_Chord;
Blade_PitchAxis = handles.Blade_PitchAxis;
Blade_NFoil = handles.Blade_NFoil;
Blade_Cone = handles.Blade_Cone;
Blade_PitchOffset = handles.Blade_PitchOffset;
NBlades = handles.NBlades;
Airfoils = handles.Airfoils;
Nosecone_Length = handles.Nosecone_Length;

% Set axis
if undock
    Plot = figure();
    set(Plot, 'Name', 'Turbine plot')
    view(-45,180/pi*atan(sin(pi/4)))
    axis equal
    axis off
else
    axes(handles.TurbinePlot)
end
light
lightangle(0, 45)
hold on

% Random number seed
rng(handles.seed);

% Plot landscape
if get(handles.Landscape,'Value') == 1 % Grassland
    
    % Landscape size
    L = max(60, Tower_OuterDiameter(1) + 5);
    W = max(L, Blade_Radius(end) + 1);
    
    % Patch of grass
    vert = [[-1 1 1 -1 -1 1 1 -1] * L/2; ...
            [-1 -1 1 1 -1 -1 1 1] * L/2; ...
            [-2 -2 -2 -2 0 0 0 0]];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Green, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Soil
    vert = [[-1 1 1 -1 -1 1 1 -1] * L/2; ...
            [-1 -1 1 1 -1 -1 1 1] * L/2; ...
            [-5 -5 -5 -5 -2 -2 -2 -2]];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Brown, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Bottom mount
    if undock
        N = 50;
    else
        N = 12;
    end
    R = interp1(Tower_Height, Tower_OuterDiameter/2, 2);
    [x,y,z] = cylinder(R + [1,1,0],N);
    z = 2*z;
    surf(x,y,z, ...
        'FaceColor', handles.Lightgrey, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Steel(1), ...
        'DiffuseStrength', handles.Steel(2), ...
        'SpecularStrength', handles.Steel(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Set limits
    if ~undock
        xlim([-L L])
        ylim([-W W])
        zlim([-5 Hub_Height + Blade_Radius(end) + 1])
    end
    
elseif get(handles.Landscape,'Value') == 2 % Forest
   
    % Landscape size
    L = max(60, Tower_OuterDiameter(1) + 5);
    W = max(L, Blade_Radius(end) + 1);
    
    % Patch of grass
    vert = [[-1 1 1 -1 -1 1 1 -1] * L/2; ...
            [-1 -1 1 1 -1 -1 1 1] * L/2; ...
            [-2 -2 -2 -2 0 0 0 0]];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Green*0.9, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Soil
    vert = [[-1 1 1 -1 -1 1 1 -1] * L/2; ...
            [-1 -1 1 1 -1 -1 1 1] * L/2; ...
            [-5 -5 -5 -5 -2 -2 -2 -2]];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Brown, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Trees
    if undock
        N = 24;
    else
        N = 6;
    end
    width = 5;
    height = 30;
    clearance = 7.5;
    [X,Y] = ndgrid(...
        -(L/2-width/2):clearance:(L/2-width/2), ...
        -(L/2-width/2):clearance:(L/2-width/2));
    for i = 1:size(X,1)
        for j = 1:size(Y,1)
            
            if sqrt(X(i,j)^2 + Y(i,j)^2) > Tower_OuterDiameter/2 + clearance
                [x,y,z] = cylinder(0.5,4);
                dX = (rand(1) - 0.5) * width*3/4;
                dY = (rand(1) - 0.5) * width*3/4;
                x = x + X(i,j) + dX;
                y = y + Y(i,j) + dY;
                z = 4*z;
                surf(x,y,z, ...
                    'FaceColor', handles.Brown, ...
                    'EdgeColor', handles.EdgeColor, ...
                    'AmbientStrength', handles.Nature(1), ...
                    'DiffuseStrength', handles.Nature(2), ...
                    'SpecularStrength', handles.Nature(3), ...
                    'BackFaceLighting', 'reverselit')
                
                [x,y,z] = cylinder([0.6,0.9,0.8,1.0,0.8,0.9,0.7,0.8,0.5,0.6,0.3,0.4,0] * (width+randn(1))*3/4,N);
                x = x + X(i,j) + dX;
                y = y + Y(i,j) + dY;
                z = 4 + (height + 2*randn(1) - 4) * z;
                TreeColor = handles.Green + 10/255*randn([1,3]);
                TreeColor(TreeColor < 0) = 0;
                TreeColor(TreeColor > 1) = 1;
                surf(x,y,z, ...
                    'FaceColor', TreeColor, ...
                    'EdgeColor', handles.EdgeColor, ...
                    'AmbientStrength', handles.Nature(1), ...
                    'DiffuseStrength', handles.Nature(2), ...
                    'SpecularStrength', handles.Nature(3), ...
                    'BackFaceLighting', 'reverselit')
                
            end
            
        end
    end
    
    % Bottom mount
    if undock
        N = 50;
    else
        N = 12;
    end
    R = interp1(Tower_Height, Tower_OuterDiameter/2, 2);
    [x,y,z] = cylinder(R + [1,1,0],N);
    z = 2*z;
    surf(x,y,z, ...
        'FaceColor', handles.Lightgrey, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Steel(1), ...
        'DiffuseStrength', handles.Steel(2), ...
        'SpecularStrength', handles.Steel(3), ...
        'BackFaceLighting', 'reverselit')
        
    % Set limits
    if ~undock
        xlim([-L L])
        ylim([-W W])
        zlim([-5 Hub_Height + Blade_Radius(end) + 1])
    end
    
elseif get(handles.Landscape,'Value') == 3 % Hill
    
    % Landscape size
    L = max(60, Tower_OuterDiameter(1) + 5);
    W = max(L, Blade_Radius(end) + 1);
    
    % Patch of grass
    [x,y] = ndgrid(...
        linspace(-L/2, L/2, 10), ...
        linspace(-L/2, L/2, 10));
    z = 15 * cos(x * pi/L) .* cos(y * pi/L);
    for n = 1:5
        i = randi(size(x,1));
        j = randi(size(y,2));
        z = z + 2*randn(1) * cos((x-x(i,j)) * pi/L) .* cos((y-y(i,j)) * pi/L);
    end
    z = z - min(z(:));
    base = z(sqrt(x.^2 + y.^2) <= Tower_OuterDiameter(1));
    if ~isempty(base)
        z = z * 15/min(base(:));
    end
    z = z - 15;
    surf(x,y,z, ...
        'FaceColor', handles.Green, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(1,:), flip(x(1,:))], ...
        [y(1,:), flip(y(1,:))], ...
        [z(1,:)-2, flip(z(1,:))], ...
        'g', 'FaceColor', handles.Green, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(:,1); flip(x(:,1))], ...
        [y(:,1); flip(y(:,1))], ...
        [z(:,1)-2; flip(z(:,1))], ...
        'g', 'FaceColor', handles.Green, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(end,:), flip(x(end,:))], ...
        [y(end,:), flip(y(end,:))], ...
        [z(end,:)-2, flip(z(end,:))], ...
        'g', 'FaceColor', handles.Green, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(:,end); flip(x(:,end))], ...
        [y(:,end); flip(y(:,end))], ...
        [z(:,end)-2; flip(z(:,end))], ...
        'g', 'FaceColor', handles.Green, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Soil
    z_ = 0*z + min(z(:)) - 3;
    surf(x,y,z_, ...
        'FaceColor', handles.Brown, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(1,:), flip(x(1,:))], ...
        [y(1,:), flip(y(1,:))], ...
        [z(1,:)-2, flip(z_(1,:))], ...
        'g', 'FaceColor', handles.Brown, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(:,1); flip(x(:,1))], ...
        [y(:,1); flip(y(:,1))], ...
        [z(:,1)-2; flip(z_(:,1))], ...
        'g', 'FaceColor', handles.Brown, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(end,:), flip(x(end,:))], ...
        [y(end,:), flip(y(end,:))], ...
        [z(end,:)-2, flip(z_(end,:))], ...
        'g', 'FaceColor', handles.Brown, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(:,end); flip(x(:,end))], ...
        [y(:,end); flip(y(:,end))], ...
        [z(:,end)-2; flip(z_(:,end))], ...
        'g', 'FaceColor', handles.Brown, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Bottom mount
    if undock
        N = 50;
    else
        N = 12;
    end
    R = interp1(Tower_Height, Tower_OuterDiameter/2, 2);
    [x,y,z] = cylinder(R + [1,1,0],N);
    z = 2*z;
    surf(x,y,z, ...
        'FaceColor', handles.Lightgrey, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Steel(1), ...
        'DiffuseStrength', handles.Steel(2), ...
        'SpecularStrength', handles.Steel(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Set limits
    if ~undock
        xlim([-L L])
        ylim([-W W])
        zlim([min(z_(:)),  Hub_Height + Blade_Radius(end) + 1])
    end

elseif get(handles.Landscape,'Value') == 4 % Mountain

    % Landscape size
    L = max(60, Tower_OuterDiameter(1) + 5);
    W = max(L, Blade_Radius(end) + 1);
    
    % Surface
    [x,y] = ndgrid(...
        linspace(-L/2, L/2, 10), ...
        linspace(-L/2, L/2, 10));
    z = 30 * cos(x * pi/L) .* cos(y * pi/2/L);
    for n = 1:5
        i = randi(size(x,1));
        j = randi(size(y,2));
        z = z + 5*randn(1) * cos((x-x(i,j)) * pi/L) .* cos((y-y(i,j)) * pi/L);
    end
    z = z - min(z(:));
    base = z(sqrt(x.^2 + y.^2) <= Tower_OuterDiameter(1));
    if ~isempty(base)
        z = z * 30/min(base(:));
    end
    z = z - 30;
    surf(x,y,z, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    colormap([...
        interp1(0:0.5:1, [handles.Rock(1); handles.Rock(1); handles.White(1)], linspace(0,1,32))', ...
        interp1(0:0.5:1, [handles.Rock(2); handles.Rock(2); handles.White(2)], linspace(0,1,32))', ...
        interp1(0:0.5:1, [handles.Rock(3); handles.Rock(3); handles.White(3)], linspace(0,1,32))'])
    caxis([-15 0])
    
    % Rock
    z_ = 0*z + min(z(:)) - 3;
    surf(x,y,z_, ...
        'FaceColor', handles.Rock, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(1,:), flip(x(1,:))], ...
        [y(1,:), flip(y(1,:))], ...
        [z(1,:), flip(z_(1,:))], ...
        'g', 'FaceColor', handles.Rock, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(:,1); flip(x(:,1))], ...
        [y(:,1); flip(y(:,1))], ...
        [z(:,1); flip(z_(:,1))], ...
        'g', 'FaceColor', handles.Rock, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(end,:), flip(x(end,:))], ...
        [y(end,:), flip(y(end,:))], ...
        [z(end,:), flip(z_(end,:))], ...
        'g', 'FaceColor', handles.Rock, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(:,end); flip(x(:,end))], ...
        [y(:,end); flip(y(:,end))], ...
        [z(:,end); flip(z_(:,end))], ...
        'g', 'FaceColor', handles.Rock, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Bottom mount
    if undock
        N = 50;
    else
        N = 12;
    end
    R = interp1(Tower_Height, Tower_OuterDiameter/2, 2);
    [x,y,z] = cylinder(R + [1,1,0],N);
    z = 2*z;
    surf(x,y,z, ...
        'FaceColor', handles.Lightgrey, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Steel(1), ...
        'DiffuseStrength', handles.Steel(2), ...
        'SpecularStrength', handles.Steel(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Set limits
    if ~undock
        xlim([-L L])
        ylim([-W W])
        zlim([min(z_(:)),  Hub_Height + Blade_Radius(end) + 1])
    end
    
elseif get(handles.Landscape,'Value') == 5 % Coastal

    % Landscape size
    L = max(60, Tower_OuterDiameter(1) + 5);
    W = max(L, Blade_Radius(end) + 1);
    
    % Sea surface
    vert = [[-1 1 1 -1 -1 1 1 -1] * L/2 * 0.99; ...
            [-1 -1 1 1 -1 -1 1 1] * L/2 * 0.99; ...
            [-5 -5 -5 -5 0 0 0 0] - 0.5];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Sea, ...
        'EdgeColor', handles.EdgeColor, ...
        'FaceAlpha', 0.5, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')

    % Land surface
    [x,y] = ndgrid(...
        linspace(-L/2, L/2, 10), ...
        linspace(-L/2, L/2, 10));
    z = 5 * cos((x - L*0.4) * pi/L) .* cos(y * pi/4/L);
    for n = 1:5
        i = randi(size(x,1));
        j = randi(size(y,2));
        z = z + randn(1) * cos((x-x(i,j)) * pi/L) .* cos((y-y(i,j)) * pi/L);
    end
    z = z - min(z(:));
    base = z(sqrt(x.^2 + y.^2) <= Tower_OuterDiameter(1));
    if ~isempty(base)
        z = z * 5/min(base(:));
    end
    z = z - 5;
    surf(x,y,z, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    colormap([...
        interp1(0:1, [handles.Sand(1); handles.Green(1)], linspace(0,1,32))', ...
        interp1(0:1, [handles.Sand(2); handles.Green(2)], linspace(0,1,32))', ...
        interp1(0:1, [handles.Sand(3); handles.Green(3)], linspace(0,1,32))'])
    caxis([-0.5 2])
    
    patch(...
        [x(1,:), flip(x(1,:))], ...
        [y(1,:), flip(y(1,:))], ...
        [z(1,:)-2, flip(z(1,:))], ...
        'g', 'FaceColor', handles.Sand, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(:,1); flip(x(:,1))], ...
        [y(:,1); flip(y(:,1))], ...
        [z(:,1)-2; flip(z(:,1))], ...
        'g', 'FaceColor', handles.Sand, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(end,:), flip(x(end,:))], ...
        [y(end,:), flip(y(end,:))], ...
        [z(end,:)-2, flip(z(end,:))], ...
        'g', 'FaceColor', handles.Sand, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(:,end); flip(x(:,end))], ...
        [y(:,end); flip(y(:,end))], ...
        [z(:,end)-2; flip(z(:,end))], ...
        'g', 'FaceColor', handles.Sand, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Soil
    z_ = 0*z + min(z(:)) - 3;
    surf(x,y,z_, ...
        'FaceColor', handles.Brown, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(1,:), flip(x(1,:))], ...
        [y(1,:), flip(y(1,:))], ...
        [z(1,:)-2, flip(z_(1,:))], ...
        'g', 'FaceColor', handles.Brown, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(:,1); flip(x(:,1))], ...
        [y(:,1); flip(y(:,1))], ...
        [z(:,1)-2; flip(z_(:,1))], ...
        'g', 'FaceColor', handles.Brown, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(end,:), flip(x(end,:))], ...
        [y(end,:), flip(y(end,:))], ...
        [z(end,:)-2, flip(z_(end,:))], ...
        'g', 'FaceColor', handles.Brown, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    patch(...
        [x(:,end); flip(x(:,end))], ...
        [y(:,end); flip(y(:,end))], ...
        [z(:,end)-2; flip(z_(:,end))], ...
        'g', 'FaceColor', handles.Brown, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Bottom mount
    if undock
        N = 50;
    else
        N = 12;
    end
    R = interp1(Tower_Height, Tower_OuterDiameter/2, 2);
    [x,y,z] = cylinder(R + [1,1,0],N);
    z = 2*z;
    surf(x,y,z, ...
        'FaceColor', handles.Lightgrey, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Steel(1), ...
        'DiffuseStrength', handles.Steel(2), ...
        'SpecularStrength', handles.Steel(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Set limits
    if ~undock
        xlim([-L L])
        ylim([-W W])
        zlim([min(z_(:)),  Hub_Height + Blade_Radius(end) + 1])
    end
    
elseif get(handles.Landscape,'Value') == 6 % Offshore
    
    % Landscape size
    L = max(60, Tower_OuterDiameter(1) + 5);
    W = max(L, Blade_Radius(end) + 1);
    
    % Sea surface
    depth = -20;
    vert = [[-1 1 1 -1 -1 1 1 -1] * L/2 * 0.99; ...
            [-1 -1 1 1 -1 -1 1 1] * L/2 * 0.99; ...
            [depth depth depth depth 0 0 0 0] + 0.01];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Sea, ...
        'EdgeColor', handles.EdgeColor, ...
        'FaceAlpha', 0.5, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Seabed
    vert = [[-1 1 1 -1 -1 1 1 -1] * L/2; ...
            [-1 -1 1 1 -1 -1 1 1] * L/2; ...
            [depth-2 depth-2 depth-2 depth-2 depth depth depth depth]];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Sand, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Soil
    vert = [[-1 1 1 -1 -1 1 1 -1] * L/2; ...
            [-1 -1 1 1 -1 -1 1 1] * L/2; ...
            [depth-5 depth-5 depth-5 depth-5 depth-2 depth-2 depth-2 depth-2]];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Brown, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')

    % Monopile
    if undock
        N = 50;
    else
        N = 12;
    end
    height = 10;
    radius = max(Tower_OuterDiameter(Tower_Height <= height))/2 + 0.1;
    [x,y,z] = cylinder(radius,N);
    z = depth + z*(height-depth);
    surf(x,y,z, ...
        'FaceColor', handles.Yellow, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Steel(1), ...
        'DiffuseStrength', handles.Steel(2), ...
        'SpecularStrength', handles.Steel(3), ...
        'BackFaceLighting', 'reverselit')
    [x,y,z] = cylinder(radius + [0,1.5,1.5],N);
    z = height + z*2;
    surf(x,y,z, ...
        'FaceColor', handles.Yellow, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Steel(1), ...
        'DiffuseStrength', handles.Steel(2), ...
        'SpecularStrength', handles.Steel(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(end,:),y(end,:),z(end,:), 'g', ...
        'FaceColor', handles.Yellow, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Steel(1), ...
        'DiffuseStrength', handles.Steel(2), ...
        'SpecularStrength', handles.Steel(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Bottom mount
    if undock
        N = 50;
    else
        N = 12;
    end
    [x,y,z] = cylinder(Tower_OuterDiameter(1)/2 + [1,1,0],N);
    z = 2*z + depth;
    surf(x,y,z, ...
        'FaceColor', handles.Grey, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Steel(1), ...
        'DiffuseStrength', handles.Steel(2), ...
        'SpecularStrength', handles.Steel(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Set limits
    if ~undock
        xlim([-L L])
        ylim([-W W])
        zlim([depth-5,  Hub_Height + Blade_Radius(end) + 1])
    end
    
elseif get(handles.Landscape,'Value') == 7 % Far offshore
    
    % Landscape size
    L = max(60, 4.5 * Tower_OuterDiameter(1) + 5);
    W = max(L, Blade_Radius(end) + 1);
    
    % Sea surface
    depth = -40;
    vert = [[-1 1 1 -1 -1 1 1 -1] * L/2 * 0.99; ...
            [-1 -1 1 1 -1 -1 1 1] * L/2 * 0.99; ...
            [depth depth depth depth 0 0 0 0] + 0.01];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Sea, ...
        'EdgeColor', handles.EdgeColor, ...
        'FaceAlpha', 0.5, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Seabed
    vert = [[-1 1 1 -1 -1 1 1 -1] * L/2; ...
            [-1 -1 1 1 -1 -1 1 1] * L/2; ...
            [depth-2 depth-2 depth-2 depth-2 depth depth depth depth]];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Sand, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Soil
    vert = [[-1 1 1 -1 -1 1 1 -1] * L/2; ...
            [-1 -1 1 1 -1 -1 1 1] * L/2; ...
            [depth-5 depth-5 depth-5 depth-5 depth-2 depth-2 depth-2 depth-2]];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Brown, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')

    % Jacket
    if undock
        N = 16 + 1;
    else
        N = 6 + 1;
    end
    height = 15;
    radius = max(Tower_OuterDiameter(Tower_Height <= height))/2;
    n = interp1([0, 1], 5 + [2.5 0.5]*radius, [0, 0.3077, 0.5769, 0.8077, 1]);
    z = [0, 0.3077, 0.5769, 0.8077, 1]*((height-7) - (depth+2)) + (depth + 2);
    Jacket_Nodes = [...
        [-1,-1, 1, 1]*n(1), ...
        [-1,-1, 1, 1]*n(2), ...
        [-1,-1, 1, 1]*n(3), ...
        [-1,-1, 1, 1]*n(4), ...
        [-1,-1, 1, 1]*n(5), 0,; ...
        [-1, 1,-1, 1]*n(1), ...
        [-1, 1,-1, 1]*n(2), ...
        [-1, 1,-1, 1]*n(3), ...
        [-1, 1,-1, 1]*n(4), ...
        [-1, 1,-1, 1]*n(5), 0,; ...
        [ 1, 1, 1, 1]*z(1), ...
        [ 1, 1, 1, 1]*z(2), ...
        [ 1, 1, 1, 1]*z(3), ...
        [ 1, 1, 1, 1]*z(4), ...
        [ 1, 1, 1, 1]*z(5), 15];
	Jacket_Members = [...
        [ 1, 2]; [ 2, 4]; [ 4, 3]; [ 3, 1]; ...
        [ 1,17]; [ 2,18]; [ 3,19]; [ 4,20]; ...
        [ 1, 6]; [ 2, 5]; [ 2, 8]; [ 4, 6]; [ 3, 8]; [ 4, 7]; [ 3, 5]; [ 1, 7]; ...
        [ 5,10]; [ 6, 9]; [ 6,12]; [ 8,10]; [ 7,12]; [ 8,11]; [ 7, 9]; [ 5,11]; ...
        [ 9,14]; [10,13]; [10,16]; [12,14]; [11,16]; [12,15]; [11,13]; [ 9,15]; ...
        [13,18]; [14,17]; [14,20]; [16,18]; [15,20]; [16,19]; [15,17]; [13,19]; ...
        [17,20]; [18,19]; [17,21]; [18,21]; [19,21]; [20,21]];
	Jacket_Diameter = ones(size(Jacket_Members));
    Jacket_Diameter(5:8,:) = 1.5;
    Jacket_Diameter(43:46,1) = 1.5;
    for i = 1:size(Jacket_Members,1)
        n1 = Jacket_Members(i,1);
        n2 = Jacket_Members(i,2);
        r1 = Jacket_Nodes(:,n1);
        r2 = Jacket_Nodes(:,n2);
        azi = repmat(linspace(0,2*pi,N),[2,1]);
        R = repmat(Jacket_Diameter(i,:)'/2,[1,N]);
        t = [zeros(1,N); ones(1,N)];
        n = (r2-r1)/norm(r2-r1);
        v = rand(3,1);
        e2 = n - v/dot(v,n);
        e2 = e2/norm(e2);
        e3 = cross(n,e2);
        e3 = e3/norm(e3);
        x = r1(1) + (r2(1)-r1(1))*t + R.*cos(azi)*e2(1) + R.*sin(azi)*e3(1); 
        y = r1(2) + (r2(2)-r1(2))*t + R.*cos(azi)*e2(2) + R.*sin(azi)*e3(2); 
        z = r1(3) + (r2(3)-r1(3))*t + R.*cos(azi)*e2(3) + R.*sin(azi)*e3(3);
        surf(x,y,z, ...
            'FaceColor', handles.Yellow, ...
            'EdgeColor', handles.EdgeColor, ...
            'AmbientStrength', handles.Steel(1), ...
            'DiffuseStrength', handles.Steel(2), ...
            'SpecularStrength', handles.Steel(3), ...
            'BackFaceLighting', 'reverselit')
    end
    if undock
        N = 12;
    else
        N = 4;
    end
    
    % Platform
    vert = [[-1 1 1 -1 -1 1 1 -1] * (Jacket_Nodes(1,20) + 1); ...
            [-1 -1 1 1 -1 -1 1 1] * (Jacket_Nodes(2,20) + 1); ...
            [0 0 0 0 1 1 1 1]*2/3 + Jacket_Nodes(3,20)];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Lightgrey, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Nature(1), ...
        'DiffuseStrength', handles.Nature(2), ...
        'SpecularStrength', handles.Nature(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Interface
    if undock
        N = 50;
    else
        N = 12;
    end
    radius = max(Tower_OuterDiameter(Tower_Height <= height))/2 + 0.01;
    [x,y,z] = cylinder(radius,N);
    z = height-7 + 5*z;
    surf(x,y,z, ...
        'FaceColor', handles.Yellow, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Steel(1), ...
        'DiffuseStrength', handles.Steel(2), ...
        'SpecularStrength', handles.Steel(3), ...
        'BackFaceLighting', 'reverselit')
    [x,y,z] = cylinder(radius + [0,1.5,1.5],N);
    z = height - 2 + z*2;
    surf(x,y,z, ...
        'FaceColor', handles.Yellow, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Steel(1), ...
        'DiffuseStrength', handles.Steel(2), ...
        'SpecularStrength', handles.Steel(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(end,:),y(end,:),z(end,:), 'g', ...
        'FaceColor', handles.Yellow, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Steel(1), ...
        'DiffuseStrength', handles.Steel(2), ...
        'SpecularStrength', handles.Steel(3), ...
        'BackFaceLighting', 'reverselit')
    
    % Bottom mount
    if undock
        N = 16;
    else
        N = 6;
    end
    for i = 1:4
        [x,y,z] = cylinder([2,2,1],N);
        x = x + Jacket_Nodes(1,i);
        y = y + Jacket_Nodes(2,i);
        z = 2*z - 2 + Jacket_Nodes(3,i);
        surf(x,y,z, ...
            'FaceColor', handles.Grey, ...
            'EdgeColor', handles.EdgeColor, ...
            'AmbientStrength', handles.Steel(1), ...
            'DiffuseStrength', handles.Steel(2), ...
            'SpecularStrength', handles.Steel(3), ...
            'BackFaceLighting', 'reverselit')
    end

    % Set limits
    if ~undock
        xlim([-L L])
        ylim([-W W])
        zlim([depth-5,  Hub_Height + Blade_Radius(end) + 1])
    end
    
end

if ~undock
    
    % Create fixed number of tower elements (N = 21)
    N = 21;
    x = linspace(Tower_Height(1), Tower_Height(end), N);
    Tower_OuterDiameter = interp1(Tower_Height, Tower_OuterDiameter, x);
    Tower_Height = x;

    % Create fixed number of blade elements (N = 21)
    N = 21;
    x = linspace(Blade_Radius(1), Blade_Radius(end), N);
    Blade_Twist = interp1(Blade_Radius, Blade_Twist, x);
    Blade_Chord = interp1(Blade_Radius, Blade_Chord, x);
    Blade_NFoil = interp1(Blade_Radius, Blade_NFoil, x, 'nearest');
    Blade_Radius = x;

    % Smooth pitch axis
    Blade_NFoil(Blade_NFoil < 1) = 1;
    Blade_PitchAxis = NaN(size(Blade_Radius));
    Blade_PitchAxis(Blade_NFoil == 1) = 0.5;
    Blade_PitchAxis(Blade_NFoil >= 4) = 0.375;
    Blade_PitchAxis(isnan(Blade_PitchAxis)) = interp1(...
        Blade_Radius(~isnan(Blade_PitchAxis)), ...
        Blade_PitchAxis(~isnan(Blade_PitchAxis)), ...
        Blade_Radius(isnan(Blade_PitchAxis)));

end

% Plot tower
if undock
    N = 50 + 1;
else
    N = 12 + 1;
end
s = Tower_Height/Tower_Height(end);
if get(handles.TowerStyle, 'Value') == 1
    paint = zeros(size(s));
elseif get(handles.TowerStyle, 'Value') == 2
    paint = ones(size(s));
elseif get(handles.TowerStyle, 'Value') == 3
    paint = zeros(size(s));
    s = 0.05*round(20*s);
    paint(s >= 0.2) = 1;
    paint(s >= 0.4) = 0;
    paint(s >= 0.6) = 1;
    paint(s >= 0.8) = 0;
    paint(s >= 1.0) = 1;
elseif get(handles.TowerStyle, 'Value') == 4
    paint = zeros(size(s));
    paint(s > 0.25) = 1;
    paint(s > 0.30) = 0;
elseif get(handles.TowerStyle, 'Value') == 5
    paint = (s > 0.8);
elseif get(handles.TowerStyle, 'Value') == 6
    paint = zeros(size(s));
    paint(Tower_Height <= 30) = 1;
elseif get(handles.TowerStyle, 'Value') == 7
    paint = zeros(size(s));
    n = length(s(Tower_Height <= 40));
    paint(1:n) = linspace(1,0,n);
elseif get(handles.TowerStyle, 'Value') == 8
    paint = [ones(1,size(s,2)); zeros(1,size(s,2))];
    s = 0.05*round(20*s);
    paint(1,s >= 0.1) = 0;
    paint(1,s >= 0.2) = 1;
    paint(1,s >= 0.3) = 0;
    paint(1,s >= 0.4) = 1;
    paint(1,s >= 0.5) = 0;
    paint(1,s >= 0.6) = 1;
    paint(1,s >= 0.7) = 0;
    paint(1,s >= 0.8) = 1;
    paint(1,s >= 0.9) = 0;
    paint(1,s >= 1.0) = 1;
    paint(2,s >= 0.1) = 1;
    paint(2,s >= 0.2) = 0;
    paint(2,s >= 0.3) = 1;
    paint(2,s >= 0.4) = 0;
    paint(2,s >= 0.5) = 1;
    paint(2,s >= 0.6) = 0;
    paint(2,s >= 0.7) = 1;
    paint(2,s >= 0.8) = 0;
    paint(2,s >= 0.9) = 1;
    paint(2,s >= 1.0) = 0;
    paint = [paint; paint];
elseif get(handles.TowerStyle, 'Value') == 9
    paint = (s < 0.15);
end
if get(handles.TowerStyle, 'Value') == 8
    paint = kron(paint,ones(round(N/4),1));
    paint = paint(1:N-1,:);
    TowerColors = zeros([size(paint),3]);
    TowerColors(:,:,1) = paint*handles.TowerPaint(1) + (1-paint)*handles.White(1);
    TowerColors(:,:,2) = paint*handles.TowerPaint(2) + (1-paint)*handles.White(2);
    TowerColors(:,:,3) = paint*handles.TowerPaint(3) + (1-paint)*handles.White(3);
    TowerColors = permute(TowerColors,[2,1,3]);
else
    TowerColors = kron(paint(:),handles.TowerPaint) + kron((1-paint(:)),handles.White);
    TowerColors = repmat(TowerColors,[1,1,N]);
    TowerColors = permute(TowerColors,[1,3,2]);
end

if get(handles.Landscape,'Value') == 7
    Tower_Height(Tower_Height <= height) = height - 5;
end
r = repmat(Tower_OuterDiameter(:)/2,[1,N]);
azi = repmat(linspace(0,2*pi,N),[length(Tower_OuterDiameter),1]);
x = r.*cos(azi);
y = r.*sin(azi);
z = repmat(Tower_Height(:),[1,N]);
x = [x; x(end,:)];
y = [y; y(end,:)];
z = [z; 0*z(end,:) + Hub_Height];
TowerColors = [TowerColors; TowerColors(end,:,:)];
TowerColors = [TowerColors, TowerColors(:,end,:)];
surf(x,y,z, ...
    'CData', TowerColors, ...
    'FaceColor', 'texturemap', ...
    'EdgeColor', handles.EdgeColor, ...
    'AmbientStrength', handles.Glassfiber(1), ...
    'DiffuseStrength', handles.Glassfiber(2), ...
    'SpecularStrength', handles.Glassfiber(3), ...
    'BackFaceLighting', 'reverselit')

% Plot nacelle
if undock
    N = 50 + 1;
else
    N = 20 + 1;
end
t = Shaft_Tilt*pi/180;
Ry = [cos(t), 0, sin(t); ...
      0,      1, 0; ...
     -sin(t), 0, cos(t)];
if handles.Nacelle == 1
    
    x = [zeros(1,17); ones(1,17)] * Nacelle_Length - Hub_Overhang + 0.3 + 0.5*Blade_Chord(1);
    y = repmat([-1, -0.9, 0.9, 1, 1, 0.95, 0.95, 1, 1, 0.9, -0.9, -1, -1, -0.95, -0.95, -1, -1], [2,1]) * Nacelle_Diameter/2;
    z = repmat([0.9, 1, 1, 0.9, 0.1, 0.1, -0.1, -0.1, -0.9, -1, -1, -0.9, -0.1, -0.1, 0.1, 0.1, 0.9], [2,1]) * Nacelle_Diameter/2;
    x(2,:) = x(2,:) + 0.5*[0.9, 1, 1, 0.9, 0.1, 0.1, -0.1, -0.1, -0.9, -1, -1, -0.9, -0.1, -0.1, 0.1, 0.1, 0.9];
    z(2,:) = 7/8*z(2,:);
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),size(x));
    y = reshape(A(2,:),size(x));
    z = reshape(A(3,:),size(z)) + Hub_Height;
    surf(x,y,z, ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(1,:),y(1,:),z(1,:), 'g', ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(end,:),y(end,:),z(end,:), 'g', ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
    dx = - Hub_Overhang + 0.3 + 0.5*Blade_Chord(1) + 0.25*Nacelle_Length;
    dz = Hub_Height + Nacelle_Diameter/2*0.9;
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Lightergrey, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 * 0.8 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2 * 0.8; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz+0.01;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
    [x,y,z] = cylinder([1 0.9 0.9]*Nacelle_Diameter/2,N-1);
    z = z*0.3 - Hub_Overhang + 0.5*Blade_Chord(1);
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),3,N);
    y = reshape(A(2,:),3,N);
    z = reshape(A(3,:),3,N) + Hub_Height;
    surf(x,y,z, ...
        'FaceColor', handles.Grey, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
elseif handles.Nacelle == 2
    
    Nx = 12;
    R = Nacelle_Diameter/2;
    r = repmat(R*sin(linspace(0,pi/2,Nx)),[N,1]);
    azi = repmat(linspace(0,2*pi,N)',[1,Nx]);
    x = repmat(cos(linspace(0,pi/2,Nx)),[N,1]) * (Nacelle_Length-0.4) + 0.3 - Hub_Overhang  + 0.5*Blade_Chord(1);
    y = r.*cos(azi);
    z = r.*sin(azi);
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),N,Nx);
    y = reshape(A(2,:),N,Nx);
    z = reshape(A(3,:),N,Nx) + Hub_Height;
    surf(x,y,z, ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
    dx = - Hub_Overhang + 0.3 + 0.5*Blade_Chord(1) + 1.5;
    dz = Hub_Height + Nacelle_Diameter/2*0.9;
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Lightergrey, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 * 0.8 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2 * 0.8; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz+0.01;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
    [x,y,z] = cylinder([1 0.9 0.9 1]*Nacelle_Diameter/2,N-1);
    z = z*0.3 - Hub_Overhang + 0.5*Blade_Chord(1);
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),4,N);
    y = reshape(A(2,:),4,N);
    z = reshape(A(3,:),4,N) + Hub_Height;
    surf(x,y,z, ...
        'FaceColor', handles.Grey, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')

elseif handles.Nacelle == 3
    
    [x,y,z] = cylinder([1 2/3]*Nacelle_Diameter/2,N-1);
    z = z * (Nacelle_Length-0.4) + 0.3 - Hub_Overhang  + 0.5*Blade_Chord(1);
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),2,N);
    y = reshape(A(2,:),2,N);
    z = reshape(A(3,:),2,N) + Hub_Height;
    surf(x,y,z, ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(end,:),y(end,:),z(end,:), 'g', ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
    dx = - Hub_Overhang + 0.3 + 0.5*Blade_Chord(1) + 0.25*Nacelle_Length;
    dz = Hub_Height + Nacelle_Diameter/2*0.85;
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Lightergrey, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 * 0.8 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2 * 0.8; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz+0.01;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
    [x,y,z] = cylinder([1 0.9 0.9 1]*Nacelle_Diameter/2,N-1);
    z = z*0.3 - Hub_Overhang + 0.5*Blade_Chord(1);
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),4,N);
    y = reshape(A(2,:),4,N);
    z = reshape(A(3,:),4,N) + Hub_Height;
    surf(x,y,z, ...
        'FaceColor', handles.Grey, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
elseif handles.Nacelle == 4
    
    [x,y,z] = cylinder([1 1]*Nacelle_Diameter/2,N-1);
    z = z * (Nacelle_Length-0.4) + 0.3 - Hub_Overhang  + 0.5*Blade_Chord(1);
    dx = max(z(:));
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),2,N);
    y = reshape(A(2,:),2,N);
    z = reshape(A(3,:),2,N) + Hub_Height;
    surf(x,y,z, ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(1,:),y(1,:),z(1,:), 'g', ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(end,:),y(end,:),z(end,:), 'g', ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    [x,y,z] = cylinder([1 1]*Tower_OuterDiameter(end)/2,N-1);
    z = dx - z * dx;
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),2,N);
    y = reshape(A(2,:),2,N);
    z = reshape(A(3,:),2,N) + Hub_Height;
    surf(x,y,z, ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    [x,y,z] = sphere(N-1);
    x = x * Tower_OuterDiameter(end)/2;
    y = y * Tower_OuterDiameter(end)/2;
    z = z * Tower_OuterDiameter(end)/2 + Hub_Height;
    surf(x,y,z, ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    [x,y,z] = cylinder([1 0.9 0.9 1]*min(Blade_Chord(1), Tower_OuterDiameter(end)/2),N-1);
    z = z*0.3 - Hub_Overhang + 0.5*Blade_Chord(1);
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),4,N);
    y = reshape(A(2,:),4,N);
    z = reshape(A(3,:),4,N) + Hub_Height;
    surf(x,y,z, ...
        'FaceColor', handles.Grey, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
elseif handles.Nacelle == 5
    
    x = [zeros(1,17); ones(1,17)] * Nacelle_Length - Hub_Overhang + 0.3 + 0.5*Blade_Chord(1);
    y = repmat([-1, -0.9, 0.9, 1, 1, 0.95, 0.95, 1, 1, 0.9, -0.9, -1, -1, -0.95, -0.95, -1, -1], [2,1]) * Nacelle_Diameter/2;
    z = repmat([0.9, 1, 1, 0.9, 0.1, 0.1, -0.1, -0.1, -0.9, -1, -1, -0.9, -0.1, -0.1, 0.1, 0.1, 0.9], [2,1]) * Nacelle_Diameter/2;
    x(2,:) = x(2,:) + 0.5*[0.9, 1, 1, 0.9, 0.1, 0.1, -0.1, -0.1, -0.9, -1, -1, -0.9, -0.1, -0.1, 0.1, 0.1, 0.9];
    z(2,:) = 7/8*z(2,:);
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),size(x));
    y = reshape(A(2,:),size(x));
    z = reshape(A(3,:),size(z)) + Hub_Height;
    surf(x,y,z, ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(1,:),y(1,:),z(1,:), 'g', ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(end,:),y(end,:),z(end,:), 'g', ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
    dx = - Hub_Overhang + 0.3 + 0.5*Blade_Chord(1) + 0.25*Nacelle_Length;
    dz = Hub_Height + Nacelle_Diameter/2*0.9;
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Lightergrey, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 * 0.8 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2 * 0.8; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz+0.01;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
    x = [0, 0, 2, 2, 0, 0; 2, 2, 3.5, 3.5, 2, 2] + 0.5*Nacelle_Length - Hub_Overhang + 0.3 + 0.5*Blade_Chord(1);
    y = [1, 1, 1, -1, -1, -1; 1, 1, 1, -1, -1, -1] * Nacelle_Diameter/2;
    z = [0.1, 0.1, 1, 1, 0.1, 0.1; 0.1, 0.1, 1, 1, 0.1, 0.1] * Nacelle_Diameter * 3/4;
    y(:,2:3) = y(:,2:3) + 0.25;
    y(:,4:5) = y(:,4:5) - 0.25;
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),size(x));
    y = reshape(A(2,:),size(y));
    z = reshape(A(3,:),size(z)) + Hub_Height;
    surf(x,y,z, ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    x = [0, 0, 2, 2, 0, 0; 2, 2, 3.5, 3.5, 2, 2] + 0.5*Nacelle_Length - Hub_Overhang + 0.3 + 0.5*Blade_Chord(1);
    y = [1, 1, 1, -1, -1, -1; 1, 1, 1, -1, -1, -1] * Nacelle_Diameter/2 + 0.05*[0, -1, -1, 1, 1, 0; 0, -1, -1, 1, 1, 0];
    z = [0.1, 0.1, 1, 1, 0.1, 0.1; 0.1, 0.1, 1, 1, 0.1, 0.1] * Nacelle_Diameter * 3/4 + 0.05*[0, 0, -1, -1, 0, 0; 0, 0, -1, -1, 0, 0];
    y(:,2:3) = y(:,2:3) + 0.25;
    y(:,4:5) = y(:,4:5) - 0.25;
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),size(x));
    y = reshape(A(2,:),size(y));
    z = reshape(A(3,:),size(z)) + Hub_Height;
    surf(x,y,z, ...
        'FaceColor', handles.Lightgrey, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
    [x,y,z] = cylinder([1 0.9 0.9]*Nacelle_Diameter/2,N-1);
    z = z*0.3 - Hub_Overhang + 0.5*Blade_Chord(1);
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),3,N);
    y = reshape(A(2,:),3,N);
    z = reshape(A(3,:),3,N) + Hub_Height;
    surf(x,y,z, ...
        'FaceColor', handles.Grey, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
elseif handles.Nacelle == 6
    
    x = [zeros(1,17); ones(1,17)] * Nacelle_Length - Hub_Overhang + 0.3 + 0.5*Blade_Chord(1);
    y = repmat([-1, -0.9, 0.9, 1, 1, 0.95, 0.95, 1, 1, 0.9, -0.9, -1, -1, -0.95, -0.95, -1, -1], [2,1]) * Nacelle_Diameter/2;
    z = repmat([0.9, 1, 1, 0.9, 0.1, 0.1, -0.1, -0.1, -0.9, -1, -1, -0.9, -0.1, -0.1, 0.1, 0.1, 0.9], [2,1]) * Nacelle_Diameter/2;
    x(2,:) = x(2,:) + 0.5*[0.9, 1, 1, 0.9, 0.1, 0.1, -0.1, -0.1, -0.9, -1, -1, -0.9, -0.1, -0.1, 0.1, 0.1, 0.9];
    z(2,:) = 7/8*z(2,:);
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),size(x));
    y = reshape(A(2,:),size(x));
    z = reshape(A(3,:),size(z)) + Hub_Height;
    surf(x,y,z, ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(1,:),y(1,:),z(1,:), 'g', ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(end,:),y(end,:),z(end,:), 'g', ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
    dx = - Hub_Overhang + 0.3 + 0.5*Blade_Chord(1) + 0.25*Nacelle_Length;
    dz = Hub_Height + Nacelle_Diameter/2*0.9;
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Lightergrey, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    vert = [[-1 1 1 -1 -1 1 1 -1] * 1/2 * 0.8 + dx; ...
            [-1 -1 1 1 -1 -1 1 1] * 1/2 * 0.8; ...
            [-1 -1 -1 -1 1 1 1 1] * 1/4];
    vert = Ry * vert;
    vert(3,:) = vert(3,:) + dz+0.01;
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
    dx = - Hub_Overhang + 0.3 + 0.5*Blade_Chord(1) + (Nacelle_Length-1.5);
    dz = 0.5 + Hub_Height + Nacelle_Diameter/2*0.9;
    vert = [[-1 1 1 -1 -1 1 1 -1] * 2 + dx*cos(t); ...
            [-1 -1 1 1 -1 -1 1 1] * 3/2; ...
            [-1 -1 -1 -1 0 0 0 0] * 0.25 + dz - dx*sin(t)];
    faces = [1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8; 1 2 3 4; 5 6 7 8];
    patch('Vertices', vert', 'Faces', faces, ...
        'FaceColor', handles.Grey, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    x = repmat([-1, 1, 1, -1, -1] * 2 + dx*cos(t), [2,1]);
    y = repmat([1, 1, -1, -1, 1] * 3/2, [2,1]);
    z = [zeros(1,5); ones(1,5)] * 0.25 + dz - dx*sin(t);
    surf(x,y,z, ...
        'FaceColor', handles.Lightgrey, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    [x,y,z] = cylinder(0.1,4);
    x = x + dx*cos(t);
    z = -z - 0.25 + dz  - dx*sin(t);
    for i = [-1, 1]
        for j = [-1, 1]
            surf(x+i,y+j,z, ...
                'FaceColor', handles.Grey, ...
                'EdgeColor', handles.EdgeColor, ...
                'AmbientStrength', handles.Glassfiber(1), ...
                'DiffuseStrength', handles.Glassfiber(2), ...
                'SpecularStrength', handles.Glassfiber(3), ...
                'BackFaceLighting', 'reverselit')
        end
    end
    
    [x,y,z] = cylinder([1 0.9 0.9]*Nacelle_Diameter/2,N-1);
    z = z*0.3 - Hub_Overhang + 0.5*Blade_Chord(1);
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),3,N);
    y = reshape(A(2,:),3,N);
    z = reshape(A(3,:),3,N) + Hub_Height;
    surf(x,y,z, ...
        'FaceColor', handles.Grey, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
elseif handles.Nacelle == 7

    x = [zeros(1,17); ones(1,17)] * Nacelle_Length - Hub_Overhang + 0.3 + 0.5*Blade_Chord(1);
    y = repmat([-1, -0.9, 0.9, 1, 1, 0.95, 0.95, 1, 1, 0.9, -0.9, -1, -1, -0.95, -0.95, -1, -1], [2,1]) * Nacelle_Diameter/2;
    z = repmat([0.9, 1, 1, 0.9, 0.1, 0.1, -0.1, -0.1, -0.9, -1, -1, -0.9, -0.1, -0.1, 0.1, 0.1, 0.9], [2,1]) * Nacelle_Diameter/2;
    x(2,:) = x(2,:) + 0.5*[0.9, 1, 1, 0.9, 0.1, 0.1, -0.1, -0.1, -0.9, -1, -1, -0.9, -0.1, -0.1, 0.1, 0.1, 0.9];
    z(2,:) = 7/8*z(2,:);
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),size(x));
    y = reshape(A(2,:),size(x));
    z = reshape(A(3,:),size(z)) + Hub_Height;
    z(2,[1,4,17]) = Hub_Height + 0.9*Nacelle_Diameter/2;
    z(2,2:3) = Hub_Height + Nacelle_Diameter/2;
    surf(x,y,z, ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(1,:),y(1,:),z(1,:), 'g', ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(end,:),y(end,:),z(end,:), 'g', ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    x = [-1-sqrt(2), -1, 1, 1+sqrt(2), 1+sqrt(2), 1, -1, -1-sqrt(2), -1-sqrt(2)] + 1+sqrt(2);
    y = [1, 1+sqrt(2), 1+sqrt(2), 1, -1, -1-sqrt(2), -1-sqrt(2), -1, 1];
    x = repmat(x,[2,1])*2.5 - Hub_Overhang + 0.3 + 0.5*Blade_Chord(1) + 1;
    y = repmat(y,[2,1])*2.5;
    z = [zeros(1,9); ones(1,9)]*0.5 + Hub_Height + Nacelle_Diameter/2;
    surf(x,y,z, ...
        'FaceColor', handles.Grey, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(1,:),y(1,:),z(1,:), 'g', ...
        'FaceColor', handles.Grey, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    patch(x(end,:),y(end,:),z(end,:), 'g', ...
        'FaceColor', handles.Grey, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    dx = - Hub_Overhang + 0.3 + 0.5*Blade_Chord(1) + 1 + (1+sqrt(2))*2.5;
    x = ([0, 0, 0, 0; 1, 1, 1, 1] - 0.5) * 0.5 + dx;
    y = [0, 1, 0, 0; 0, 1, 0, 0];
    z = [-1, 0, 0, -1; -1, 0, 0, -1] + Hub_Height + Nacelle_Diameter/2;
    if Nacelle_Diameter < 10
        for i = [-1 1]
            for j = [-1 1]
                surf(x + 1.5*i,y*j + Nacelle_Diameter/2*j,z, ...
                    'FaceColor', handles.Lightgrey, ...
                    'EdgeColor', handles.EdgeColor, ...
                    'AmbientStrength', handles.Steel(1), ...
                    'DiffuseStrength', handles.Steel(2), ...
                    'SpecularStrength', handles.Steel(3), ...
                    'BackFaceLighting', 'reverselit')
            end
        end
    end
    h = 0.75;
    q = linspace(0,2*pi,25);
    x = [(5+2/3*h)*cos(q); 5*cos(q)];
    y = [(5+2/3*h)*sin(q); 5*sin(q)];
    z = zeros(size(x));
    x = x + dx;
    z = z+0.01 + 0.5 + Hub_Height + Nacelle_Diameter/2;
    surf(x,y,z, ...
        'FaceColor', handles.Yellow, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    x = [1, 1, 0, 0, 1, 1, -1, -1, 0, 0, -1, -1, 1]*2 + [0, 0, h/2, h/2, 0, 0, 0, 0, -h/2, -h/2, 0, 0, 0];
    y = [-1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1]*2 + [0, h, h, -h, -h, 0, 0, -h, -h, h, h, 0, 0];
    z = zeros(size(x));
    x = x + dx;
    z = z+0.01 + 0.5 + Hub_Height + Nacelle_Diameter/2;
    patch(x,y,z, 'g', ...
        'FaceColor', handles.Yellow, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
    [x,y,z] = cylinder([1 0.9 0.9]*Nacelle_Diameter/2,N-1);
    z = z*0.3 - Hub_Overhang + 0.5*Blade_Chord(1);
    A = [reshape(z,1,[]); reshape(x,1,[]); reshape(y,1,[])]; 
    A = Ry * A;
    x = reshape(A(1,:),3,N);
    y = reshape(A(2,:),3,N);
    z = reshape(A(3,:),3,N) + Hub_Height;
    surf(x,y,z, ...
        'FaceColor', handles.Grey, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
end
    
% Plot nose cone
if handles.Nacelle == 4
    R = min(Blade_Chord(1)*3/4, Tower_OuterDiameter(end)/2);
else
    R = Nacelle_Diameter/2;
end
if handles.Hub == 1
    
    if undock
        Nx = 50 + 1;
    else
        Nx = 10 + 1;
    end
    r = repmat(R*sin(linspace(0,pi/2,Nx)),[N,1]);
    azi = repmat(linspace(0,2*pi,N)',[1,Nx]);
    x = 0.5*Blade_Chord(1) - repmat(cos(linspace(0,pi/2,Nx)),[N,1])*Nosecone_Length - Hub_Overhang;
    y = r.*cos(azi);
    z = r.*sin(azi);

elseif handles.Hub == 2
    
    Nx = 4;
    [x_,y_,z_] = cylinder([1, 0.99]*R,N-1);
    x = z_'; y = x_'; z = y_';
    x = [x * 0.9, x(:,end), x(:,end)];
    y = [y, y(:,end) * 0.9, y(:,end) * 0];
    z = [z, z(:,end) * 0.9, z(:,end) * 0];
    x = 0.5*Blade_Chord(1) - x*Nosecone_Length - Hub_Overhang;

elseif handles.Hub == 3
    
    Nx = 3;
    [x_,y_,z_] = cylinder([1, 0.99]*R,N-1);
    x = z_'; y = x_'; z = y_';
    x = [x*0.5*Blade_Chord(1)/Nosecone_Length, x(:,end)];
    y = [y, y(:,end) * 0];
    z = [z, z(:,end) * 0];
    x = 0.5*Blade_Chord(1) - x*Nosecone_Length - Hub_Overhang;

elseif handles.Hub == 4
    
    if undock
        Nx = 50 + 1;
    else
        Nx = 10 + 1;
    end
    rho = (R^2 + Nosecone_Length^2)/(2*R);
    x = linspace(0,Nosecone_Length,Nx);
    r = repmat(sqrt(rho^2 - (Nosecone_Length-x).^2) + R - rho,[N,1]);
    azi = repmat(linspace(0,2*pi,N)',[1,Nx]);
    x = repmat(x-Nosecone_Length,[N,1]) + 0.5*Blade_Chord(1) - Hub_Overhang;
    y = r.*cos(azi);
    z = r.*sin(azi);
    
end
A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])]; 
A = Ry * A;
x = reshape(A(1,:),N,Nx);
y = reshape(A(2,:),N,Nx);
z = reshape(A(3,:),N,Nx) + Hub_Height;
surf(x,y,z, ...
    'FaceColor', handles.Lightergrey, ...
    'EdgeColor', handles.EdgeColor, ...
    'AmbientStrength', handles.Glassfiber(1), ...
    'DiffuseStrength', handles.Glassfiber(2), ...
    'SpecularStrength', handles.Glassfiber(3), ...
    'BackFaceLighting', 'reverselit')

% Plot blades
if undock
    N = 10;
else
    N = 40;
end
x = [];
y = [];
for i = 1:length(Blade_NFoil)
    x = [x; ([Airfoils{Blade_NFoil(i)}(1,1:N:end-1), Airfoils{Blade_NFoil(i)}(1,1)] - Blade_PitchAxis(i)) * Blade_Chord(i)];
end
for i = 1:length(Blade_NFoil)
    t_u = max(Airfoils{Blade_NFoil(i)}(2,1:200) * Blade_Chord(i));
    t_l = min(Airfoils{Blade_NFoil(i)}(2,200:end) * Blade_Chord(i));
    t(i) = t_u - t_l;
end
s = 2.*round((length(Blade_NFoil)/5+1)/2)-1;
t = conv(t(:),s(:)/sum(s),'same')./t(:);
for i = 1:length(Blade_NFoil)
    y = [y; -1*[Airfoils{Blade_NFoil(i)}(2,1:N:end-1), Airfoils{Blade_NFoil(i)}(2,1)] * Blade_Chord(i)*t(i)];
end
z = repmat(Blade_Radius(:),[1,size(x,2)]);
for i = 1:length(Blade_NFoil)
    t = pi/2 - (Blade_Twist(i) + Blade_PitchOffset) * pi/180;
    Rz = [cos(t),-sin(t), 0; ...
          sin(t), cos(t), 0; ...
          0,      0,      1];
    A = Rz * [x(i,:); y(i,:); z(i,:)];
    x(i,:) = A(1,:);
    y(i,:) = A(2,:);
    z(i,:) = A(3,:);
end
x = [x(1,:); x; 0.5*x(end,:)];
y = [y(1,:); y; 0*y(end,:)];
z = [0*z(1,:); z; 0.01 + z(end,:)];
o = 2*pi/NBlades;
t = Shaft_Tilt*pi/180;
Ry = [cos(t), 0, sin(t); ...
      0,      1, 0; ...
     -sin(t), 0, cos(t)];
c = -Blade_Cone*pi/180;
Rc = [cos(c), 0, sin(c); ...
      0,      1, 0; ...
     -sin(c), 0, cos(c)];
N = size(x);

s = Blade_Radius/Blade_Radius(end);
if get(handles.BladeStyle, 'Value') == 1
    paint = zeros(size(s));
elseif get(handles.BladeStyle, 'Value') == 2
    paint = ones(size(s));
elseif get(handles.BladeStyle, 'Value') == 3
    paint = zeros(size(s));
    paint(s > 0.25) = 1;
    paint(s > 0.50) = 0;
    paint(s > 0.75) = 1;
elseif get(handles.BladeStyle, 'Value') == 4
    paint = zeros(size(s));
    paint(s > 0.125) = 1;
    paint(s > 0.250) = 0;
    paint(s > 0.375) = 1;
    paint(s > 0.500) = 0;
    paint(s > 0.625) = 1;
    paint(s > 0.750) = 0;
    paint(s > 0.875) = 1;
elseif get(handles.BladeStyle, 'Value') == 5
    paint = (s > 0.8);
elseif get(handles.BladeStyle, 'Value') == 6
    paint = zeros(size(s));
    paint(s > 0.650) = 1;
    paint(s > 0.750) = 0;
    paint(s > 0.875) = 1;
elseif get(handles.BladeStyle, 'Value') == 7
    paint = zeros(size(s));
    paint(s > 0.70) = 1;
    paint(s > 0.75) = 0;
    paint(s > 0.80) = 1;
elseif get(handles.BladeStyle, 'Value') == 8
    paint = zeros(2,size(s,2));
    paint(1,s > 0.75) = 0;
    paint(1,s > 0.80) = 1;
    paint(1,s > 0.85) = 0;
    paint(1,s > 0.90) = 1;
    paint(2,s > 0.75) = 1;
    paint(2,s > 0.80) = 0;
    paint(2,s > 0.85) = 1;
    paint(2,s > 0.90) = 0;
    paint = [paint; paint];
elseif get(handles.BladeStyle, 'Value') == 9
    paint = (s < 0.15);
end
if get(handles.BladeStyle, 'Value') == 8
    paint = kron(paint,ones(round((N(2)+1)/4),1));
    paint = paint(1:N(2),:);
    BladeColors = zeros([size(paint),3]);
    BladeColors(:,:,1) = paint*handles.BladePaint(1) + (1-paint)*handles.White(1);
    BladeColors(:,:,2) = paint*handles.BladePaint(2) + (1-paint)*handles.White(2);
    BladeColors(:,:,3) = paint*handles.BladePaint(3) + (1-paint)*handles.White(3);
    BladeColors = permute(BladeColors,[2,1,3]);
else
    BladeColors = kron(paint(:),handles.BladePaint) + kron((1-paint(:)),handles.White);
    BladeColors = repmat(BladeColors,[1,1,N(2)]);
    BladeColors = permute(BladeColors,[1,3,2]);
end

if NBlades == 1
    do = pi/2;
else
    do = pi - pi/NBlades;
end

for B = 1:NBlades
    Rx = [1, 0,      0; ...
          0, cos(B*o + do),-sin(B*o + do); ...
          0, sin(B*o + do), cos(B*o + do)];
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])];
    A = Rc * A;
    A(1,:) = A(1,:) - Hub_Overhang;
    A = Ry * Rx * A;
    xB = reshape(A(1,:),N);
    yB = reshape(A(2,:),N);
    zB = reshape(A(3,:),N) + Hub_Height;
    surf(xB,yB,zB, ...
        'CData', BladeColors, ...
        'FaceColor', 'texturemap', ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit');
end

if NBlades == 1
    
    [x,y,z] = cylinder(Blade_Chord(1)/2*[2/3 1/3], N(2)-1);
    N = size(x);
    z = -1*z*Blade_Radius(end)/4;
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])];
    A = Rc * A;
    A(1,:) = A(1,:) - Hub_Overhang;
    A = Ry * Rx * A;
    x = reshape(A(1,:),N);
    y = reshape(A(2,:),N);
    z = reshape(A(3,:),N) + Hub_Height;
    surf(x,y,z, ...
        'FaceColor', handles.White, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
    [x,y,z] = sphere(N(2)-1);
    x = x * Blade_Chord(1)/4;
    y = y * Blade_Chord(1)/2;
    z = z * Blade_Chord(1)/4 - Blade_Radius(end)/4;
    N = size(x);
    A = [reshape(x,1,[]); reshape(y,1,[]); reshape(z,1,[])];
    A = Rc * A;
    A(1,:) = A(1,:) - Hub_Overhang;
    A = Ry * Rx * A;
    x = reshape(A(1,:),N);
    y = reshape(A(2,:),N);
    z = reshape(A(3,:),N) + Hub_Height;
    surf(x,y,z, ...
        'FaceColor', handles.BladePaint, ...
        'EdgeColor', handles.EdgeColor, ...
        'AmbientStrength', handles.Glassfiber(1), ...
        'DiffuseStrength', handles.Glassfiber(2), ...
        'SpecularStrength', handles.Glassfiber(3), ...
        'BackFaceLighting', 'reverselit')
    
end

%% Undock plot
function Undock_Callback(hObject, eventdata, handles)

% Stop animation
if get(handles.Animate, 'Value')
    set(handles.Animate, 'Value', 0);
    set(handles.Animate, 'String', 'Animate');
end

% Undock
PlotTurbine(handles,true)

%% Blade paint style
function BladeStyle_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
function BladeStyle_Callback(hObject, eventdata, handles)
cla(handles.TurbinePlot)
PlotTurbine(handles,false)
function BladeColor_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
function BladeColor_Callback(hObject, eventdata, handles)

% Set blade colors
handles.BladePaint = handles.ColorArray(get(handles.BladeColor, 'Value'),:);

% Update handles structure
guidata(hObject, handles);

% Redraw plot
cla(handles.TurbinePlot)
PlotTurbine(handles,false)

%% Tower paint style
function TowerStyle_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
function TowerStyle_Callback(hObject, eventdata, handles)
cla(handles.TurbinePlot)
PlotTurbine(handles,false)
function TowerColor_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
function TowerColor_Callback(hObject, eventdata, handles)

% Set tower colors
handles.TowerPaint = handles.ColorArray(get(handles.TowerColor, 'Value'),:);

% Update handles structure
guidata(hObject, handles);

% Redraw plot
cla(handles.TurbinePlot)
PlotTurbine(handles,false)

%% Rotation speed text box
function RotationSpeed_textbox_Callback(hObject, eventdata, handles)
RotationSpeed = str2double(get(hObject, 'String'));
if isnan(RotationSpeed)
    set(hObject, 'String', num2str(handles.RotationSpeed));
else
    handles.RotationSpeed = RotationSpeed;
end
guidata(hObject, handles); 
function RotationSpeed_textbox_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%% Animate button
function Animate_Callback(hObject, eventdata, handles)

% Animation framerate
fps = 30;
closing = false;

% Get geometry from handles
Hub_Height = handles.Hub_Height;
Shaft_Tilt = handles.Shaft_Tilt;
NBlades = handles.NBlades;

% Rotating parts
if NBlades == 1
    NParts = 3 + 1;
else
    NParts = NBlades + 1;
end

% Rotation matrices
t = Shaft_Tilt*pi/180;
o = handles.RotationSpeed/fps * 2*pi/60;
R = ...
    [cos(t),  0,       sin(t); ...
     0,       1,       0; ...
    -sin(t),  0,       cos(t)] * ...
    [1,       0,       0; ...
     0,       cos(o), -sin(o); ...
     0,       sin(o),  cos(o)] * ...
    [cos(-t), 0,       sin(-t); ...
     0,       1,       0; ...
    -sin(-t), 0,       cos(-t)];

% Change button text
if get(hObject,'Value')
    set(hObject, 'String', 'Stop')
else
    set(hObject, 'String', 'Animate')
end

% Draw frames
frametime = tic;
while get(hObject,'Value')

    camera = get(handles.TurbinePlot, 'CameraPosition');
    
    while toc(frametime) < 1/fps 
    end
    frametime = tic;

    drawtime = tic;
    Parts = get(handles.TurbinePlot, 'Children');
    for i = 1:NParts
        Part = Parts(i);
        N = size(get(Part,'XData'));
        A = [...
            reshape(get(Part,'XData'),1,[]); ...
            reshape(get(Part,'YData'),1,[]); ...
            reshape(get(Part,'ZData'),1,[]) - Hub_Height];
        A = R*A;
        set(Part,...
            'XData', reshape(A(1,:),N), ...
            'YData', reshape(A(2,:),N), ...
            'ZData', reshape(A(3,:),N) + Hub_Height);
    end

    drawnow
    
    if strcmp(get(hObject, 'String'), 'Closing...')
        closing = true;
        break
    end
    
    if toc(drawtime) > 1/fps
        if isequal(camera, get(handles.TurbinePlot, 'CameraPosition'))
            if fps > 1
                fps = fps - 1;
                o = handles.RotationSpeed/fps * 2*pi/60;
                R = ...
                    [cos(t),  0,       sin(t); ...
                     0,       1,       0; ...
                    -sin(t),  0,       cos(t)] * ...
                    [1,       0,       0; ...
                     0,       cos(o), -sin(o); ...
                     0,       sin(o),  cos(o)] * ...
                    [cos(-t), 0,       sin(-t); ...
                     0,       1,       0; ...
                    -sin(-t), 0,       cos(-t)];
            end
        end
    elseif toc(drawtime) < 1/30
        if isequal(camera, get(handles.TurbinePlot, 'CameraPosition'))
            if fps < 30
                fps = fps + 1;
                o = handles.RotationSpeed/fps * 2*pi/60;
                R = ...
                    [cos(t),  0,       sin(t); ...
                     0,       1,       0; ...
                    -sin(t),  0,       cos(t)] * ...
                    [1,       0,       0; ...
                     0,       cos(o), -sin(o); ...
                     0,       sin(o),  cos(o)] * ...
                    [cos(-t), 0,       sin(-t); ...
                     0,       1,       0; ...
                    -sin(-t), 0,       cos(-t)];
            end
        end
    end

end

if closing
    close all force
end

%% Landscape dropdown menu
function Landscape_Callback(hObject, eventdata, handles)

% Stop animation
animating = false;
if get(handles.Animate, 'Value')
    animating = true;
    set(handles.Animate, 'Value', 0);
end

% Random number seed
rng('shuffle');
RNG = rng;
handles.seed = RNG.Seed;
guidata(hObject, handles);

% Redraw plot
cla(handles.TurbinePlot)
PlotTurbine(handles,false)

% Resume animation
if animating
    set(handles.Animate, 'Value', 1);
end
function Landscape_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%% Blade design submenu
function BladeDesign_Callback(hObject, eventdata, handles)

% Stop animation
if get(handles.Animate, 'Value')
    set(handles.Animate, 'Value', 0);
    set(handles.Animate, 'String', 'Animate');
end

% Color part
if handles.NBlades == 1
    BladeParts = 3;
else
    BladeParts = handles.NBlades;
end
NParts = 1:BladeParts;
Parts = get(handles.TurbinePlot, 'Children');
for i = NParts
    Part = Parts(i);
    set(Part, 'FaceColor', handles.Blue);
end

% Disable interface while part is being edited
buttons = [...
    handles.OpenProject, ...
    handles.SaveProject, ...
    handles.Landscape, ...
    handles.BladeStyle, ...
    handles.BladeColor, ...
    handles.TowerStyle, ...
    handles.TowerColor, ...
    handles.RotationSpeed_textbox, ...
    handles.Undock, ...
    handles.Animate, ...
    handles.BladeDesign, ...
    handles.TowerDesign, ...
    handles.NacelleDesign, ...
    handles.DrivetrainDesign, ...
    handles.GenerateSteadyOp, ...
    handles.BuildFAST];
set(buttons, 'Enable', 'off');

% Blades submenu
[NBlades, ...
 Blade_Cone, ...
 Blade_Radius, ...
 Blade_Twist, ...
 Blade_Chord, ...
 Blade_NFoil, ...
 Blade_Mass, ...
 Blade_EIflap, ...
 Blade_EIedge] = ...
    BladeDesign(...
    handles.NBlades, ...
    handles.Blade_Cone, ...
    handles.Blade_Radius, ...
    handles.Blade_Twist, ...
    handles.Blade_Chord, ...
    handles.Blade_NFoil, ...
    handles.Blade_Mass, ...
    handles.Blade_EIflap, ...
    handles.Blade_EIedge, ...
    handles.Airfoils, ...
    get(handles.BladeStyle, 'Value'), ...
    handles.ColorArray(get(handles.BladeColor, 'Value'),:));

% Enable interface
set(buttons, 'Enable', 'on');

% Store geometry in handles
handles.NBlades = NBlades(:);
handles.Blade_Cone = Blade_Cone(:);
handles.Blade_Radius = Blade_Radius(:);
handles.Blade_Twist = Blade_Twist(:);
handles.Blade_Chord = Blade_Chord(:);
handles.Blade_NFoil = Blade_NFoil(:);
handles.Blade_Mass = Blade_Mass(:);
handles.Blade_EIflap = Blade_EIflap(:);
handles.Blade_EIedge = Blade_EIedge(:);

% Update handles structure
guidata(hObject, handles);

% Redraw plot
cla(handles.TurbinePlot)
PlotTurbine(handles,false)

%% Tower design submenu
function TowerDesign_Callback(hObject, eventdata, handles)

% Stop animation
if get(handles.Animate, 'Value')
    set(handles.Animate, 'Value', 0);
    set(handles.Animate, 'String', 'Animate');
end

% Color part
if handles.NBlades == 1
    BladeParts = 3;
else
    BladeParts = handles.NBlades;
end
NacelleParts = [6, 4, 5, 6, 8, 12, 9] + 2;
if handles.Nacelle_Diameter < 10
    NacelleParts(7) = NacelleParts(7) + 4;
end
NParts = BladeParts + NacelleParts(handles.Nacelle);
Parts = get(handles.TurbinePlot, 'Children');
for i = NParts
    Part = Parts(i);
    set(Part, 'FaceColor', handles.Blue);
end

% Disable interface while part is being edited
buttons = [...
    handles.OpenProject, ...
    handles.SaveProject, ...
    handles.Landscape, ...
    handles.BladeStyle, ...
    handles.BladeColor, ...
    handles.TowerStyle, ...
    handles.TowerColor, ...
    handles.RotationSpeed_textbox, ...
    handles.Undock, ...
    handles.Animate, ...
    handles.BladeDesign, ...
    handles.TowerDesign, ...
    handles.NacelleDesign, ...
    handles.DrivetrainDesign, ...
    handles.GenerateSteadyOp, ...
    handles.BuildFAST];
set(buttons, 'Enable', 'off');

% Tower submenu
[Tower_Height, ...
 Tower_OuterDiameter, ...
 Tower_Mass, ...
 Tower_EI, ...
 Tower_BottomThickness, ...
 Tower_TopThickness] = ...
    TowerDesign(...
    handles.Tower_Height, ...
    handles.Tower_OuterDiameter, ...
    handles.Tower_Mass, ...
    handles.Tower_EI, ...
    handles.Tower_BottomThickness, ...
    handles.Tower_TopThickness, ...
    get(handles.TowerStyle, 'Value'), ...
    handles.ColorArray(get(handles.TowerColor, 'Value'),:));

% Enable interface
set(buttons, 'Enable', 'on');

% Store geometry in handles
handles.Tower_Height = Tower_Height(:);
handles.Tower_OuterDiameter = Tower_OuterDiameter(:);
handles.Tower_Mass = Tower_Mass(:);
handles.Tower_EI = Tower_EI(:);
handles.Tower_BottomThickness = Tower_BottomThickness(:);
handles.Tower_TopThickness = Tower_TopThickness(:);

% Update handles structure
guidata(hObject, handles);

% Redraw plot
cla(handles.TurbinePlot)
PlotTurbine(handles,false)

%% Nacelle design submenu
function NacelleDesign_Callback(hObject, eventdata, handles)

% Stop animation
if get(handles.Animate, 'Value')
    set(handles.Animate, 'Value', 0);
    set(handles.Animate, 'String', 'Animate');
end

% Color part
if handles.NBlades == 1
    BladeParts = 3;
else
    BladeParts = handles.NBlades;
end
NacelleParts = [6, 4, 5, 6, 8, 12, 9] + 2;
if handles.Nacelle_Diameter < 10
    NacelleParts(7) = NacelleParts(7) + 4;
end
NParts = (BladeParts + 1):(BladeParts - 1 + NacelleParts(handles.Nacelle));
Parts = get(handles.TurbinePlot, 'Children');
for i = NParts
    Part = Parts(i);
    set(Part, 'FaceColor', handles.Blue);
end

% Disable interface while part is being edited
buttons = [...
    handles.OpenProject, ...
    handles.SaveProject, ...
    handles.Landscape, ...
    handles.BladeStyle, ...
    handles.BladeColor, ...
    handles.TowerStyle, ...
    handles.TowerColor, ...
    handles.RotationSpeed_textbox, ...
    handles.Undock, ...
    handles.Animate, ...
    handles.BladeDesign, ...
    handles.TowerDesign, ...
    handles.NacelleDesign, ...
    handles.DrivetrainDesign, ...
    handles.GenerateSteadyOp, ...
    handles.BuildFAST];
set(buttons, 'Enable', 'off');

% Nacelle submenu
[Nacelle_Length, ...
 Nacelle_Diameter, ...
 Nacelle, ...
 Nacelle_Mass, ...
 Hub_Mass, ...
 Hub_Overhang, ...
 Hub_Height, ...
 Hub, ...
 Shaft_Tilt, ...
 Nosecone_Length] = ...
    NacelleDesign(...
    handles.Nacelle_Length, ...
    handles.Nacelle_Diameter, ...
    handles.Nacelle, ...
    handles.Nacelle_Mass, ...
    handles.Hub_Mass, ...
    handles.Hub_Overhang, ...
    handles.Hub_Height, ...
    handles.Hub, ...
    handles.Shaft_Tilt, ...
    handles.Nosecone_Length, ...
    handles.Blade_Chord, ...
    handles.Tower_OuterDiameter, ...
    handles.NBlades, ...
    handles.Blade_Cone);

% Enable interface
set(buttons, 'Enable', 'on');

% Store geometry in handles
handles.Nacelle_Length = Nacelle_Length;
handles.Nacelle_Diameter = Nacelle_Diameter;
handles.Nacelle = Nacelle;
handles.Nacelle_Mass = Nacelle_Mass;
handles.Hub_Mass = Hub_Mass;
handles.Hub_Overhang = Hub_Overhang;
handles.Hub_Height = Hub_Height;
handles.Hub = Hub;
handles.Shaft_Tilt = Shaft_Tilt;
handles.Nosecone_Length = Nosecone_Length;

% Update handles structure
guidata(hObject, handles);

% Redraw plot
cla(handles.TurbinePlot)
PlotTurbine(handles,false)

%% Drivetrain design submenu
function DrivetrainDesign_Callback(hObject, eventdata, handles)

% Stop animation
if get(handles.Animate, 'Value')
    set(handles.Animate, 'Value', 0);
    set(handles.Animate, 'String', 'Animate');
end

% Color part
if handles.NBlades == 1
    BladeParts = 3;
else
    BladeParts = handles.NBlades;
end
NacelleParts = [6, 4, 5, 6, 8, 12, 9] + 2;
if handles.Nacelle_Diameter < 10
    NacelleParts(7) = NacelleParts(7) + 4;
end
DrivetrainParts = [3, 2, 2, 3, 3, 9, 10];
NParts = (BladeParts + 2 + DrivetrainParts(handles.Nacelle)):(BladeParts - 1 + NacelleParts(handles.Nacelle));
Parts = get(handles.TurbinePlot, 'Children');
for i = NParts
    Part = Parts(i);
    set(Part, 'FaceColor', handles.Blue);
end

% Disable interface while part is being edited
buttons = [...
    handles.OpenProject, ...
    handles.SaveProject, ...
    handles.Landscape, ...
    handles.BladeStyle, ...
    handles.BladeColor, ...
    handles.TowerStyle, ...
    handles.TowerColor, ...
    handles.RotationSpeed_textbox, ...
    handles.Undock, ...
    handles.Animate, ...
    handles.BladeDesign, ...
    handles.TowerDesign, ...
    handles.NacelleDesign, ...
    handles.DrivetrainDesign, ...
    handles.GenerateSteadyOp, ...
    handles.BuildFAST];
set(buttons, 'Enable', 'off');

% Drivetrain submenu
[Rated_Power, ...
 Generator_Efficiency, ...
 HSS_Inertia, ...
 Gearbox_Efficiency, ...
 Gearbox_Ratio, ...
 WindSpeed_Cutin, ...
 WindSpeed_Cutout, ...
 Rated_TipSpeedRatio, ...
 Blade_PitchOffset] = ...
    DrivetrainDesign(...
    handles.Rated_Power, ...
    handles.Generator_Efficiency, ...
    handles.HSS_Inertia, ...
    handles.Gearbox_Efficiency, ...
    handles.Gearbox_Ratio, ...
    handles.WindSpeed_Cutin, ...
    handles.WindSpeed_Cutout, ...
    handles.Rated_TipSpeedRatio, ...
    handles.Blade_PitchOffset);

% Enable interface
set(buttons, 'Enable', 'on');

% Store geometry in handles
handles.Rated_Power = Rated_Power;
handles.Generator_Efficiency = Generator_Efficiency;
handles.HSS_Inertia = HSS_Inertia;
handles.Gearbox_Efficiency = Gearbox_Efficiency;
handles.Gearbox_Ratio = Gearbox_Ratio;
handles.WindSpeed_Cutin = WindSpeed_Cutin;
handles.WindSpeed_Cutout = WindSpeed_Cutout;
handles.Rated_TipSpeedRatio = Rated_TipSpeedRatio;
handles.Blade_PitchOffset = Blade_PitchOffset;

% Update handles structure
guidata(hObject, handles);

% Redraw plot
cla(handles.TurbinePlot)
PlotTurbine(handles,false)

%% Plot steady operating curves
function GenerateSteadyOp_Callback(hObject, eventdata, handles)

% Get geometry from handles
Blade_Radius = handles.Blade_Radius;
Blade_Twist = handles.Blade_Twist * pi/180;
Blade_Chord = handles.Blade_Chord;
Blade_NFoil = handles.Blade_NFoil;
NBlades = handles.NBlades;
WindSpeed_Cutin = handles.WindSpeed_Cutin;
WindSpeed_Cutout = handles.WindSpeed_Cutout;
Generator_Efficiency = handles.Generator_Efficiency;
Gearbox_Efficiency = handles.Gearbox_Efficiency;
Rated_Power = handles.Rated_Power;
TSR = handles.Rated_TipSpeedRatio;
AoA = handles.AoA * pi/180;
Pitch = handles.Blade_PitchOffset * pi/180;
for i = 1:length(Blade_NFoil)
    CL(:,i) = handles.CL(:,Blade_NFoil(i));
    CD(:,i) = handles.CD(:,Blade_NFoil(i));
end

% Local tip speed ratio and solidity
r = Blade_Radius/Blade_Radius(end);
lambdar = TSR * r;
sigmar = NBlades*Blade_Chord./(2*pi*Blade_Radius);

% Initial induction factors
anew = 1/3*ones(size(Blade_Radius));
a_new = zeros(size(Blade_Radius));
for iter = 1:100

    a = anew;
    a_ = a_new;

    % Inflow angle
    phi = real(atan((1-a)./((1+a_).*lambdar)));

    % Tip loss correction
    F = 2/pi * acos(exp(-NBlades/2*(1-r)./(r.*sin(phi))));

    % Aerodynamic force coefficients
    alpha = phi - Pitch - Blade_Twist;
    for j = 1:length(Blade_Radius)
        Cl(j) = interp1(AoA,CL(:,j),alpha(j));
        Cd(j) = interp1(AoA,CD(:,j),alpha(j));
    end
    Cl = Cl(:);
    Cd = Cd(:);
    Cl(isnan(Cl)) = 1e-6;
    Cd(isnan(Cd)) = 0;
    Cl(Cl == 0) = 1e-6;

    % Thrust coefficient
    CT = sigmar.*(1-a).^2.*(Cl.*cos(phi)+Cd.*sin(phi))./(sin(phi).^2);

    % New induction factors
    for j = 1:length(Blade_Radius)
        if CT(j) < 0.96
            anew(j) = 1/(1+4*F(j)*sin(phi(j))^2/(sigmar(j)*Cl(j)*cos(phi(j))));
        else
            anew(j) = (1/F(j))*(0.143+sqrt(0.0203-0.6427*(0.889-CT(j))));
        end
    end
    a_new = 1./(4*F.*cos(phi)./(sigmar.*Cl)-1);

    if max(abs(anew - a)) < 0.01 && max(abs(a_new - a_)) < 0.002
        break
    end

end

% Power coefficient
dCP = (8*(lambdar-[0; lambdar(1:end-1)])./TSR^2).*F.*sin(phi).^2.*(cos(phi)-lambdar.*sin(phi)).*(sin(phi)+lambdar.*cos(phi)).*(1-(Cd./Cl).*(cot(phi))).*lambdar.^2;
CP = real(sum(dCP(~isnan(dCP))));

% Power curve
U = 0:0.1:(5*ceil(WindSpeed_Cutout/5) + 5);
P = 0.5 * 1.225 * pi*Blade_Radius(end)^2 * U.^3 * CP * Gearbox_Efficiency * Generator_Efficiency;
P(P > Rated_Power) = Rated_Power;
P(U < WindSpeed_Cutin) = 0;
P(U > WindSpeed_Cutout) = 0;

% Plot
Plot = figure();
set(Plot, 'Name', 'Steady power curve')
plot(U,P/1e6)
xlim([0 max(U)])
ylim([0 ceil(Rated_Power/1e6)+0.5])
xlabel('Wind speed [m/s]')
ylabel('Electrical power [MW]')

% Send data to Matlab workspace
assignin('base', 'WindSpeed', U);
assignin('base', 'ElectricalPower', P);
assignin('base', 'PowerCoefficient', CP);
    
%% Build FAST files
function BuildFAST_Callback(hObject, eventdata, handles)

% Disable interface while part is being edited
buttons = [...
    handles.OpenProject, ...
    handles.SaveProject, ...
    handles.Landscape, ...
    handles.BladeStyle, ...
    handles.BladeColor, ...
    handles.TowerStyle, ...
    handles.TowerColor, ...
    handles.RotationSpeed_textbox, ...
    handles.Undock, ...
    handles.Animate, ...
    handles.BladeDesign, ...
    handles.TowerDesign, ...
    handles.NacelleDesign, ...
    handles.DrivetrainDesign, ...
    handles.GenerateSteadyOp, ...
    handles.BuildFAST];
set(buttons, 'Enable', 'off');

% Build submenu
Build(...
    handles.Tower_Height, ...
    handles.Tower_OuterDiameter, ...
    handles.Tower_Mass, ...
    handles.Tower_EI, ...
    handles.Tower_BottomThickness, ...
    handles.Tower_TopThickness, ...
    handles.Blade_Radius, ...
    handles.Blade_Mass, ...
    handles.Blade_EIflap, ...
    handles.Blade_EIedge, ...
    handles.Blade_Twist, ...
    handles.Blade_Chord, ...
    handles.Blade_PitchAxis, ...
    handles.Blade_NFoil, ...
    handles.Blade_Cone, ...
    handles.NBlades, ...
    handles.Airfoils, ...
    handles.AoA, ...
    handles.CL, ...
    handles.CD, ...
    handles.Nacelle, ...
    handles.Nacelle_Length, ...
    handles.Nacelle_Diameter, ...
    handles.Nacelle_Mass, ...
    handles.Hub, ...
    handles.Hub_Height, ...
    handles.Hub_Overhang, ...
    handles.Hub_Mass, ...
    handles.Shaft_Tilt, ...
    handles.Nosecone_Length, ...
    handles.WindSpeed_Cutin, ...
    handles.WindSpeed_Cutout, ...
    handles.Rated_Power, ...
    handles.Rated_TipSpeedRatio, ...
    handles.Blade_PitchOffset, ...
    handles.Generator_Efficiency, ...
    handles.HSS_Inertia, ...
    handles.Gearbox_Efficiency, ...
    handles.Gearbox_Ratio);

% Enable interface
set(buttons, 'Enable', 'on');
